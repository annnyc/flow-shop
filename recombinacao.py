from typing import List, Tuple
import itertools
import json
import random

''' Aplica o crossover entre os pais
    Vamos dividir os dois pais em três pedaços,
    Cada um desses pedaços seram recombinados
    para gerar novos filhos.
    Se os pedaços possuirem a mesma tarefa (job),
    um dos items repetidos sera substituido pelas
    tarefas restantes aleatoriamente
    Um par de pais gera n filhos 
'''
def crossover(par: Tuple[List[int], List[int]]):
  pai1, pai2 = par

  tamanho_de_cada_parte = len(pai1) // 3

  partes_pai1 = [pai1[i:i+tamanho_de_cada_parte] for i in range(0, len(pai1), tamanho_de_cada_parte)]
  partes_pai2 = [pai2[i:i+tamanho_de_cada_parte] for i in range(0, len(pai2), tamanho_de_cada_parte)]

  ## partes_pai um possui uma lista de listas, cada uma com 1/3 da tarefa
  ## ex: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] para a entrada [1, 2, 3, 4, 5, 6, 7, 8, 9]
  res = []
    
  ## gera uma coninação unica entre os pedaços de cada pai
  all_combinations = list(itertools.combinations(partes_pai1 + partes_pai2, 3))

  for combination_tuple in all_combinations:
    temp = []
    for item_list in combination_tuple:
      temp += item_list

    ## remove possiveis duplicatas
    ## savar como string para depois transaformar em set para eliminar possiveis repetições
    try:
      res.append(json.dumps(temp))
    except:
      print(temp)
  unique_elements = [json.loads(x) for x in list(set(res))]

  ## como cada elemento pode possuir a mesma tarefa mais de uma vez, precisamos fazer com que esse processo seje unico
  possiveis_jobs = set(pai1)

  ## remove jobs duplicados
  novos_filhos = []

  for novo_filho in unique_elements:
    novo_filho_set = set(possiveis_jobs)
    elementos_repetidos = {}

    for job in novo_filho:
      elementos_repetidos[job] = 1 + elementos_repetidos.get(job, 0)

      if job in novo_filho_set:
        novo_filho_set.remove(job)

    for job_index in range(len(novo_filho)):
      if elementos_repetidos[novo_filho[job_index]] > 1:
        elementos_repetidos[novo_filho[job_index]] -= 1
        novo_filho[job_index] = random.choice(list(novo_filho_set))
        novo_filho_set.remove(novo_filho[job_index])

    novos_filhos.append(novo_filho)
  
  ## retira possiveis filhos duplicados
  json_item = [json.dumps(x) for x in novos_filhos]

  json_list_set = list(set(json_item))

  filhos_unicos = [json.loads(x) for x in json_list_set]
  
  return filhos_unicos

def recombinacao(populacaoSelecionada: List[Tuple[List[int], List[int]]]):
  return [crossover(par) for par in populacaoSelecionada]

# a = [([17, 4, 6, 11, 7, 16, 19, 3, 20, 14, 2, 5, 15, 12, 18, 10, 8, 1, 13, 9], [11, 5, 1, 8, 15, 4, 17, 2, 6, 18, 9, 16, 13, 7, 20, 12, 3, 10, 14, 19]), ([5, 8, 4, 2, 3, 1, 14, 7, 20, 16, 11, 9, 12, 15, 6, 19, 13, 10, 18, 17], [13, 17, 4, 16, 3, 8, 6, 11, 12, 18, 1, 2, 9, 5, 10, 7, 14, 20, 15, 19]), ([4, 19, 12, 17, 6, 14, 5, 9, 8, 10, 7, 18, 16, 11, 13, 3, 20, 1, 2, 15], [14, 13, 6, 19, 5, 16, 3, 8, 20, 2, 9, 12, 15, 7, 11, 17, 4, 1, 10, 18]), ([18, 8, 15, 5, 11, 1, 16, 3, 4, 7, 20, 19, 9, 12, 14, 2, 10, 17, 6, 13], [19, 3, 20, 12, 8, 16, 14, 6, 5, 18, 4, 10, 11, 7, 2, 17, 1, 15, 9, 13]), ([18, 17, 1, 4, 19, 11, 8, 3, 15, 14, 6, 12, 7, 13, 9, 16, 10, 2, 5, 20], [16, 17, 5, 4, 6, 12, 19, 14, 18, 2, 11, 10, 7, 1, 3, 9, 8, 15, 13, 20]), ([12, 20, 17, 3, 1, 15, 5, 10, 11, 18, 4, 13, 16, 14, 2, 7, 8, 6, 19, 9], [6, 11, 3, 16, 9, 2, 7, 18, 10, 14, 17, 1, 12, 13, 4, 20, 8, 19, 5, 15]), ([10, 9, 13, 3, 7, 15, 6, 14, 4, 1, 12, 19, 2, 8, 18, 20, 5, 17, 11, 16], [2, 16, 3, 12, 14, 10, 20, 8, 11, 5, 17, 15, 9, 7, 6, 1, 18, 4, 19, 13]), ([2, 16, 5, 3, 11, 18, 1, 13, 17, 12, 19, 10, 4, 9, 15, 14, 20, 8, 7, 6], [5, 9, 18, 7, 19, 20, 17, 11, 15, 12, 6, 13, 8, 16, 14, 2, 10, 4, 3, 1]), ([6, 3, 10, 17, 5, 16, 12, 1, 9, 20, 8, 15, 2, 18, 14, 13, 11, 4, 7, 19], [11, 15, 14, 2, 9, 1, 16, 5, 13, 19, 17, 20, 4, 7, 18, 6, 8, 3, 10, 12]), ([14, 2, 18, 3, 8, 5, 1, 10, 4, 7, 20, 15, 17, 19, 11, 6, 16, 12, 9, 13], [1, 4, 5, 20, 11, 16, 6, 14, 15, 2, 10, 17, 18, 9, 8, 12, 13, 7, 19, 3]), ([4, 18, 16, 10, 12, 19, 6, 5, 1, 8, 3, 7, 11, 15, 14, 13, 20, 9, 17, 2], [6, 16, 8, 20, 10, 2, 19, 9, 7, 18, 5, 15, 17, 12, 1, 14, 11, 13, 4, 3]), ([6, 17, 3, 11, 18, 13, 1, 9, 16, 8, 12, 5, 10, 7, 20, 15, 19, 4, 2, 14], [14, 7, 16, 20, 4, 13, 3, 1, 11, 15, 18, 2, 5, 10, 12, 17, 8, 9, 19, 6]), ([13, 2, 19, 11, 10, 16, 18, 14, 7, 3, 17, 9, 12, 8, 1, 5, 15, 6, 4, 20], [16, 15, 2, 8, 10, 12, 7, 17, 13, 6, 5, 20, 9, 1, 19, 3, 4, 11, 18, 14]), ([1, 12, 13, 10, 9, 19, 20, 7, 11, 3, 14, 6, 15, 2, 17, 4, 16, 18, 8, 5], [10, 20, 2, 3, 19, 9, 12, 5, 11, 14, 1, 17, 18, 15, 16, 4, 13, 6, 7, 8]), ([5, 10, 16, 15, 11, 9, 14, 12, 7, 1, 17, 3, 20, 4, 18, 19, 8, 13, 6, 2], [4, 14, 2, 19, 6, 7, 12, 8, 3, 16, 5, 9, 10, 11, 18, 13, 20, 15, 1, 17]), ([6, 12, 17, 4, 9, 1, 7, 19, 11, 15, 20, 3, 13, 18, 14, 10, 16, 8, 2, 5], [11, 8, 5, 12, 17, 7, 6, 4, 3, 19, 20, 9, 14, 1, 15, 18, 16, 13, 2, 10]), ([14, 13, 19, 20, 17, 18, 5, 11, 3, 10, 12, 15, 2, 16, 6, 7, 8, 4, 9, 1], [14, 3, 11, 16, 9, 12, 8, 20, 18, 2, 17, 6, 5, 4, 15, 19, 10, 13, 1, 7]), ([18, 5, 4, 15, 10, 14, 1, 17, 16, 13, 3, 20, 7, 9, 2, 8, 12, 11, 19, 6], [4, 20, 12, 14, 16, 9, 19, 13, 10, 15, 1, 8, 11, 7, 5, 18, 6, 17, 2, 3]), ([19, 3, 13, 7, 17, 12, 11, 5, 2, 9, 16, 14, 18, 1, 20, 4, 15, 10, 6, 8], [9, 15, 14, 7, 2, 13, 4, 20, 17, 8, 16, 19, 11, 3, 1, 12, 5, 10, 6, 18]), ([19, 15, 17, 11, 7, 5, 4, 8, 14, 13, 9, 12, 10, 6, 20, 2, 18, 1, 3, 16], [8, 11, 10, 17, 18, 4, 20, 2, 14, 3, 1, 16, 19, 15, 12, 13, 6, 9, 5, 7]), ([14, 12, 9, 4, 5, 2, 6, 16, 1, 10, 11, 20, 3, 17, 15, 18, 8, 19, 7, 13], [12, 2, 13, 15, 10, 19, 11, 8, 14, 20, 1, 3, 6, 17, 9, 5, 18, 4, 16, 7]), ([8, 15, 14, 1, 13, 4, 20, 9, 10, 19, 12, 11, 6, 5, 7, 16, 18, 17, 2, 3], [13, 19, 1, 6, 20, 15, 3, 16, 18, 2, 5, 11, 4, 12, 17, 14, 9, 8, 10, 7]), ([19, 7, 8, 16, 17, 18, 11, 6, 13, 9, 14, 15, 3, 10, 2, 20, 12, 1, 5, 4], [5, 1, 10, 16, 6, 12, 9, 3, 17, 2, 8, 7, 20, 4, 13, 19, 15, 14, 11, 18]), ([4, 18, 17, 10, 12, 5, 14, 16, 9, 15, 2, 3, 20, 1, 19, 7, 11, 13, 8, 6], [9, 8, 4, 17, 15, 19, 3, 5, 12, 14, 10, 6, 20, 16, 18, 7, 1, 11, 2, 13]), ([5, 8, 14, 10, 18, 6, 9, 20, 16, 19, 1, 11, 3, 13, 17, 2, 7, 15, 4, 12], [14, 4, 1, 3, 8, 6, 11, 17, 10, 5, 20, 15, 13, 2, 12, 7, 19, 16, 9, 18]), ([1, 16, 20, 17, 8, 15, 11, 18, 13, 3, 2, 12, 10, 6, 5, 7, 19, 4, 9, 14], [3, 4, 14, 7, 20, 19, 17, 18, 13, 6, 1, 11, 16, 9, 15, 5, 12, 2, 10, 8]), ([1, 17, 8, 2, 4, 13, 10, 5, 11, 19, 3, 14, 18, 6, 9, 15, 16, 20, 7, 12], [3, 19, 8, 4, 2, 7, 10, 18, 17, 15, 14, 1, 13, 11, 16, 9, 12, 6, 20, 5]), ([8, 4, 1, 9, 17, 13, 10, 20, 6, 5, 11, 15, 16, 14, 19, 2, 12, 18, 3, 7], [4, 15, 1, 3, 18, 16, 9, 8, 11, 17, 6, 10, 2, 19, 12, 7, 20, 5, 14, 13]), ([12, 10, 11, 9, 18, 13, 16, 3, 2, 1, 7, 8, 19, 15, 5, 20, 14, 4, 6, 17], [1, 18, 13, 16, 4, 9, 10, 2, 5, 19, 20, 7, 11, 12, 14, 17, 15, 3, 8, 6]), ([19, 18, 20, 5, 10, 15, 17, 8, 7, 16, 1, 2, 12, 3, 13, 9, 11, 6, 14, 4], [15, 5, 1, 4, 3, 11, 8, 13, 12, 20, 18, 16, 2, 14, 10, 17, 6, 19, 7, 9]), ([10, 15, 18, 14, 16, 6, 5, 11, 17, 13, 12, 20, 9, 2, 1, 7, 8, 3, 19, 4], [8, 15, 1, 5, 13, 9, 10, 19, 17, 20, 12, 18, 4, 6, 11, 2, 3, 16, 14, 7]), ([8, 9, 15, 5, 14, 11, 17, 7, 13, 12, 1, 6, 16, 20, 19, 2, 4, 10, 3, 18], [3, 15, 12, 10, 7, 8, 5, 18, 6, 4, 16, 11, 20, 2, 17, 1, 14, 9, 19, 13]), ([13, 17, 18, 9, 10, 12, 1, 4, 7, 3, 11, 16, 15, 20, 19, 8, 6, 2, 5, 14], [6, 11, 10, 15, 14, 3, 9, 8, 4, 17, 16, 19, 20, 12, 5, 13, 2, 7, 1, 18]), ([19, 7, 3, 10, 15, 1, 11, 13, 4, 16, 18, 9, 14, 12, 8, 5, 17, 6, 20, 2], [8, 17, 7, 16, 1, 19, 6, 10, 18, 15, 20, 4, 2, 13, 14, 9, 11, 12, 3, 5]), ([14, 19, 9, 4, 6, 17, 10, 3, 16, 15, 5, 20, 8, 2, 7, 12, 11, 18, 1, 13], [2, 17, 1, 16, 8, 9, 6, 5, 15, 3, 7, 10, 12, 14, 19, 13, 11, 4, 20, 18]), ([5, 18, 10, 8, 11, 17, 6, 15, 16, 4, 7, 1, 3, 19, 14, 12, 13, 2, 20, 9], [13, 11, 19, 1, 9, 12, 15, 7, 20, 3, 14, 16, 5, 2, 18, 8, 10, 4, 6, 17]), ([3, 7, 10, 11, 16, 14, 1, 8, 19, 2, 6, 4, 18, 17, 20, 9, 12, 5, 15, 13], [7, 12, 13, 14, 20, 17, 16, 6, 3, 9, 19, 4, 10, 15, 5, 8, 1, 11, 18, 2])]

# recombinacao(a)